//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FYMS.BSVIEW.MainService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMainService")]
    public interface IMainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DoWork", ReplyAction="http://tempuri.org/IMainService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DoWork", ReplyAction="http://tempuri.org/IMainService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/login", ReplyAction="http://tempuri.org/IMainService/loginResponse")]
        string[] login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/login", ReplyAction="http://tempuri.org/IMainService/loginResponse")]
        System.Threading.Tasks.Task<string[]> loginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/loginlimit", ReplyAction="http://tempuri.org/IMainService/loginlimitResponse")]
        string loginlimit(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/loginlimit", ReplyAction="http://tempuri.org/IMainService/loginlimitResponse")]
        System.Threading.Tasks.Task<string> loginlimitAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminUserAll", ReplyAction="http://tempuri.org/IMainService/AdminUserAllResponse")]
        string AdminUserAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminUserAll", ReplyAction="http://tempuri.org/IMainService/AdminUserAllResponse")]
        System.Threading.Tasks.Task<string> AdminUserAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Add", ReplyAction="http://tempuri.org/IMainService/AddResponse")]
        string Add(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Add", ReplyAction="http://tempuri.org/IMainService/AddResponse")]
        System.Threading.Tasks.Task<string> AddAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminByID", ReplyAction="http://tempuri.org/IMainService/AdminByIDResponse")]
        string AdminByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminByID", ReplyAction="http://tempuri.org/IMainService/AdminByIDResponse")]
        System.Threading.Tasks.Task<string> AdminByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Update", ReplyAction="http://tempuri.org/IMainService/UpdateResponse")]
        string Update(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Update", ReplyAction="http://tempuri.org/IMainService/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Delete", ReplyAction="http://tempuri.org/IMainService/DeleteResponse")]
        string Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Delete", ReplyAction="http://tempuri.org/IMainService/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleAll", ReplyAction="http://tempuri.org/IMainService/AdminRoleAllResponse")]
        string AdminRoleAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleAll", ReplyAction="http://tempuri.org/IMainService/AdminRoleAllResponse")]
        System.Threading.Tasks.Task<string> AdminRoleAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleAdd", ReplyAction="http://tempuri.org/IMainService/AdminRoleAddResponse")]
        string AdminRoleAdd(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleAdd", ReplyAction="http://tempuri.org/IMainService/AdminRoleAddResponse")]
        System.Threading.Tasks.Task<string> AdminRoleAddAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleByID", ReplyAction="http://tempuri.org/IMainService/AdminRoleByIDResponse")]
        string AdminRoleByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleByID", ReplyAction="http://tempuri.org/IMainService/AdminRoleByIDResponse")]
        System.Threading.Tasks.Task<string> AdminRoleByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleUpdate", ReplyAction="http://tempuri.org/IMainService/AdminRoleUpdateResponse")]
        string AdminRoleUpdate(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleUpdate", ReplyAction="http://tempuri.org/IMainService/AdminRoleUpdateResponse")]
        System.Threading.Tasks.Task<string> AdminRoleUpdateAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleDelete", ReplyAction="http://tempuri.org/IMainService/AdminRoleDeleteResponse")]
        string AdminRoleDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleDelete", ReplyAction="http://tempuri.org/IMainService/AdminRoleDeleteResponse")]
        System.Threading.Tasks.Task<string> AdminRoleDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelAll", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelAllResponse")]
        string AdminRoleRelAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelAll", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelAllResponse")]
        System.Threading.Tasks.Task<string> AdminRoleRelAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelAdd", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelAddResponse")]
        string AdminRoleRelAdd(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelAdd", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelAddResponse")]
        System.Threading.Tasks.Task<string> AdminRoleRelAddAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelUpdate", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelUpdateResponse")]
        string AdminRoleRelUpdate(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelUpdate", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelUpdateResponse")]
        System.Threading.Tasks.Task<string> AdminRoleRelUpdateAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelEntity", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelEntityResponse")]
        string AdminRoleRelEntity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminRoleRelEntity", ReplyAction="http://tempuri.org/IMainService/AdminRoleRelEntityResponse")]
        System.Threading.Tasks.Task<string> AdminRoleRelEntityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/RoleRelOpen", ReplyAction="http://tempuri.org/IMainService/RoleRelOpenResponse")]
        string RoleRelOpen(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/RoleRelOpen", ReplyAction="http://tempuri.org/IMainService/RoleRelOpenResponse")]
        System.Threading.Tasks.Task<string> RoleRelOpenAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuAll", ReplyAction="http://tempuri.org/IMainService/MenuAllResponse")]
        string MenuAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuAll", ReplyAction="http://tempuri.org/IMainService/MenuAllResponse")]
        System.Threading.Tasks.Task<string> MenuAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuAdd", ReplyAction="http://tempuri.org/IMainService/MenuAddResponse")]
        string MenuAdd(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuAdd", ReplyAction="http://tempuri.org/IMainService/MenuAddResponse")]
        System.Threading.Tasks.Task<string> MenuAddAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuUpdate", ReplyAction="http://tempuri.org/IMainService/MenuUpdateResponse")]
        string MenuUpdate(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuUpdate", ReplyAction="http://tempuri.org/IMainService/MenuUpdateResponse")]
        System.Threading.Tasks.Task<string> MenuUpdateAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuEntity", ReplyAction="http://tempuri.org/IMainService/MenuEntityResponse")]
        string MenuEntity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuEntity", ReplyAction="http://tempuri.org/IMainService/MenuEntityResponse")]
        System.Threading.Tasks.Task<string> MenuEntityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuOpen", ReplyAction="http://tempuri.org/IMainService/MenuOpenResponse")]
        string MenuOpen(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/MenuOpen", ReplyAction="http://tempuri.org/IMainService/MenuOpenResponse")]
        System.Threading.Tasks.Task<string> MenuOpenAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitAll", ReplyAction="http://tempuri.org/IMainService/LimitAllResponse")]
        string LimitAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitAll", ReplyAction="http://tempuri.org/IMainService/LimitAllResponse")]
        System.Threading.Tasks.Task<string> LimitAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitAdd", ReplyAction="http://tempuri.org/IMainService/LimitAddResponse")]
        bool LimitAdd(string str, string str1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitAdd", ReplyAction="http://tempuri.org/IMainService/LimitAddResponse")]
        System.Threading.Tasks.Task<bool> LimitAddAsync(string str, string str1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitUpdate", ReplyAction="http://tempuri.org/IMainService/LimitUpdateResponse")]
        bool LimitUpdate(string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitUpdate", ReplyAction="http://tempuri.org/IMainService/LimitUpdateResponse")]
        System.Threading.Tasks.Task<bool> LimitUpdateAsync(string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitEditData", ReplyAction="http://tempuri.org/IMainService/LimitEditDataResponse")]
        string[] LimitEditData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitEditData", ReplyAction="http://tempuri.org/IMainService/LimitEditDataResponse")]
        System.Threading.Tasks.Task<string[]> LimitEditDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitDelete", ReplyAction="http://tempuri.org/IMainService/LimitDeleteResponse")]
        string LimitDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/LimitDelete", ReplyAction="http://tempuri.org/IMainService/LimitDeleteResponse")]
        System.Threading.Tasks.Task<string> LimitDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/loginlog", ReplyAction="http://tempuri.org/IMainService/loginlogResponse")]
        void loginlog(string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/loginlog", ReplyAction="http://tempuri.org/IMainService/loginlogResponse")]
        System.Threading.Tasks.Task loginlogAsync(string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Errorlog", ReplyAction="http://tempuri.org/IMainService/ErrorlogResponse")]
        void Errorlog(string ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Errorlog", ReplyAction="http://tempuri.org/IMainService/ErrorlogResponse")]
        System.Threading.Tasks.Task ErrorlogAsync(string ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/controllog", ReplyAction="http://tempuri.org/IMainService/controllogResponse")]
        void controllog(string str, string functionname, string other);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/controllog", ReplyAction="http://tempuri.org/IMainService/controllogResponse")]
        System.Threading.Tasks.Task controllogAsync(string str, string functionname, string other);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/errorcontrollog", ReplyAction="http://tempuri.org/IMainService/errorcontrollogResponse")]
        void errorcontrollog(string str, string functionname, string other, string ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/errorcontrollog", ReplyAction="http://tempuri.org/IMainService/errorcontrollogResponse")]
        System.Threading.Tasks.Task errorcontrollogAsync(string str, string functionname, string other, string ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ErrorLogAll", ReplyAction="http://tempuri.org/IMainService/ErrorLogAllResponse")]
        string ErrorLogAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ErrorLogAll", ReplyAction="http://tempuri.org/IMainService/ErrorLogAllResponse")]
        System.Threading.Tasks.Task<string> ErrorLogAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ErrorLogByID", ReplyAction="http://tempuri.org/IMainService/ErrorLogByIDResponse")]
        string ErrorLogByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ErrorLogByID", ReplyAction="http://tempuri.org/IMainService/ErrorLogByIDResponse")]
        System.Threading.Tasks.Task<string> ErrorLogByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminLogAll", ReplyAction="http://tempuri.org/IMainService/AdminLogAllResponse")]
        string AdminLogAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AdminLogAll", ReplyAction="http://tempuri.org/IMainService/AdminLogAllResponse")]
        System.Threading.Tasks.Task<string> AdminLogAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ControlLogAll", ReplyAction="http://tempuri.org/IMainService/ControlLogAllResponse")]
        string ControlLogAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ControlLogAll", ReplyAction="http://tempuri.org/IMainService/ControlLogAllResponse")]
        System.Threading.Tasks.Task<string> ControlLogAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ControlLogByID", ReplyAction="http://tempuri.org/IMainService/ControlLogByIDResponse")]
        string ControlLogByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ControlLogByID", ReplyAction="http://tempuri.org/IMainService/ControlLogByIDResponse")]
        System.Threading.Tasks.Task<string> ControlLogByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTErrorLogAll", ReplyAction="http://tempuri.org/IMainService/CTErrorLogAllResponse")]
        string CTErrorLogAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTErrorLogAll", ReplyAction="http://tempuri.org/IMainService/CTErrorLogAllResponse")]
        System.Threading.Tasks.Task<string> CTErrorLogAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTLoginLogAll", ReplyAction="http://tempuri.org/IMainService/CTLoginLogAllResponse")]
        string CTLoginLogAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTLoginLogAll", ReplyAction="http://tempuri.org/IMainService/CTLoginLogAllResponse")]
        System.Threading.Tasks.Task<string> CTLoginLogAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTErrorLogByID", ReplyAction="http://tempuri.org/IMainService/CTErrorLogByIDResponse")]
        string CTErrorLogByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTErrorLogByID", ReplyAction="http://tempuri.org/IMainService/CTErrorLogByIDResponse")]
        System.Threading.Tasks.Task<string> CTErrorLogByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTControlLogAll", ReplyAction="http://tempuri.org/IMainService/CTControlLogAllResponse")]
        string CTControlLogAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTControlLogAll", ReplyAction="http://tempuri.org/IMainService/CTControlLogAllResponse")]
        System.Threading.Tasks.Task<string> CTControlLogAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTControlLogByID", ReplyAction="http://tempuri.org/IMainService/CTControlLogByIDResponse")]
        string CTControlLogByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CTControlLogByID", ReplyAction="http://tempuri.org/IMainService/CTControlLogByIDResponse")]
        System.Threading.Tasks.Task<string> CTControlLogByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeAll", ReplyAction="http://tempuri.org/IMainService/CheckTypeAllResponse")]
        string CheckTypeAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeAll", ReplyAction="http://tempuri.org/IMainService/CheckTypeAllResponse")]
        System.Threading.Tasks.Task<string> CheckTypeAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeAdd", ReplyAction="http://tempuri.org/IMainService/CheckTypeAddResponse")]
        string CheckTypeAdd(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeAdd", ReplyAction="http://tempuri.org/IMainService/CheckTypeAddResponse")]
        System.Threading.Tasks.Task<string> CheckTypeAddAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeUpdate", ReplyAction="http://tempuri.org/IMainService/CheckTypeUpdateResponse")]
        string CheckTypeUpdate(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeUpdate", ReplyAction="http://tempuri.org/IMainService/CheckTypeUpdateResponse")]
        System.Threading.Tasks.Task<string> CheckTypeUpdateAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeDelete", ReplyAction="http://tempuri.org/IMainService/CheckTypeDeleteResponse")]
        string CheckTypeDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTypeDelete", ReplyAction="http://tempuri.org/IMainService/CheckTypeDeleteResponse")]
        System.Threading.Tasks.Task<string> CheckTypeDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelAll", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelAllResponse")]
        string CheckRoleRelAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelAll", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelAllResponse")]
        System.Threading.Tasks.Task<string> CheckRoleRelAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelAdd", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelAddResponse")]
        bool CheckRoleRelAdd(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelAdd", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelAddResponse")]
        System.Threading.Tasks.Task<bool> CheckRoleRelAddAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelUpdate", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelUpdateResponse")]
        bool CheckRoleRelUpdate(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelUpdate", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelUpdateResponse")]
        System.Threading.Tasks.Task<bool> CheckRoleRelUpdateAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DataByRoleID", ReplyAction="http://tempuri.org/IMainService/DataByRoleIDResponse")]
        string DataByRoleID(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DataByRoleID", ReplyAction="http://tempuri.org/IMainService/DataByRoleIDResponse")]
        System.Threading.Tasks.Task<string> DataByRoleIDAsync(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelEdit", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelEditResponse")]
        string[] CheckRoleRelEdit(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelEdit", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelEditResponse")]
        System.Threading.Tasks.Task<string[]> CheckRoleRelEditAsync(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelDelete", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelDeleteResponse")]
        bool CheckRoleRelDelete(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckRoleRelDelete", ReplyAction="http://tempuri.org/IMainService/CheckRoleRelDeleteResponse")]
        System.Threading.Tasks.Task<bool> CheckRoleRelDeleteAsync(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ht_CheckTableSave", ReplyAction="http://tempuri.org/IMainService/ht_CheckTableSaveResponse")]
        bool ht_CheckTableSave(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ht_CheckTableSave", ReplyAction="http://tempuri.org/IMainService/ht_CheckTableSaveResponse")]
        System.Threading.Tasks.Task<bool> ht_CheckTableSaveAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableAll", ReplyAction="http://tempuri.org/IMainService/CheckTableAllResponse")]
        string CheckTableAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableAll", ReplyAction="http://tempuri.org/IMainService/CheckTableAllResponse")]
        System.Threading.Tasks.Task<string> CheckTableAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableByID", ReplyAction="http://tempuri.org/IMainService/CheckTableByIDResponse")]
        string CheckTableByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableByID", ReplyAction="http://tempuri.org/IMainService/CheckTableByIDResponse")]
        System.Threading.Tasks.Task<string> CheckTableByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableSave", ReplyAction="http://tempuri.org/IMainService/CheckTableSaveResponse")]
        bool CheckTableSave(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableSave", ReplyAction="http://tempuri.org/IMainService/CheckTableSaveResponse")]
        System.Threading.Tasks.Task<bool> CheckTableSaveAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableNoSuccess", ReplyAction="http://tempuri.org/IMainService/CheckTableNoSuccessResponse")]
        bool CheckTableNoSuccess(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/CheckTableNoSuccess", ReplyAction="http://tempuri.org/IMainService/CheckTableNoSuccessResponse")]
        System.Threading.Tasks.Task<bool> CheckTableNoSuccessAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeAll", ReplyAction="http://tempuri.org/IMainService/AccountTypeAllResponse")]
        string AccountTypeAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeAll", ReplyAction="http://tempuri.org/IMainService/AccountTypeAllResponse")]
        System.Threading.Tasks.Task<string> AccountTypeAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeAdd", ReplyAction="http://tempuri.org/IMainService/AccountTypeAddResponse")]
        string AccountTypeAdd(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeAdd", ReplyAction="http://tempuri.org/IMainService/AccountTypeAddResponse")]
        System.Threading.Tasks.Task<string> AccountTypeAddAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeUpdate", ReplyAction="http://tempuri.org/IMainService/AccountTypeUpdateResponse")]
        string AccountTypeUpdate(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeUpdate", ReplyAction="http://tempuri.org/IMainService/AccountTypeUpdateResponse")]
        System.Threading.Tasks.Task<string> AccountTypeUpdateAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeDelete", ReplyAction="http://tempuri.org/IMainService/AccountTypeDeleteResponse")]
        string AccountTypeDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AccountTypeDelete", ReplyAction="http://tempuri.org/IMainService/AccountTypeDeleteResponse")]
        System.Threading.Tasks.Task<string> AccountTypeDeleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceChannel : FYMS.BSVIEW.MainService.IMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainServiceClient : System.ServiceModel.ClientBase<FYMS.BSVIEW.MainService.IMainService>, FYMS.BSVIEW.MainService.IMainService {
        
        public MainServiceClient() {
        }
        
        public MainServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MainServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string[] login(string username, string password) {
            return base.Channel.login(username, password);
        }
        
        public System.Threading.Tasks.Task<string[]> loginAsync(string username, string password) {
            return base.Channel.loginAsync(username, password);
        }
        
        public string loginlimit(string username, string password) {
            return base.Channel.loginlimit(username, password);
        }
        
        public System.Threading.Tasks.Task<string> loginlimitAsync(string username, string password) {
            return base.Channel.loginlimitAsync(username, password);
        }
        
        public string AdminUserAll() {
            return base.Channel.AdminUserAll();
        }
        
        public System.Threading.Tasks.Task<string> AdminUserAllAsync() {
            return base.Channel.AdminUserAllAsync();
        }
        
        public string Add(string str) {
            return base.Channel.Add(str);
        }
        
        public System.Threading.Tasks.Task<string> AddAsync(string str) {
            return base.Channel.AddAsync(str);
        }
        
        public string AdminByID(int id) {
            return base.Channel.AdminByID(id);
        }
        
        public System.Threading.Tasks.Task<string> AdminByIDAsync(int id) {
            return base.Channel.AdminByIDAsync(id);
        }
        
        public string Update(string str) {
            return base.Channel.Update(str);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(string str) {
            return base.Channel.UpdateAsync(str);
        }
        
        public string Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public string AdminRoleAll() {
            return base.Channel.AdminRoleAll();
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleAllAsync() {
            return base.Channel.AdminRoleAllAsync();
        }
        
        public string AdminRoleAdd(string str) {
            return base.Channel.AdminRoleAdd(str);
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleAddAsync(string str) {
            return base.Channel.AdminRoleAddAsync(str);
        }
        
        public string AdminRoleByID(int id) {
            return base.Channel.AdminRoleByID(id);
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleByIDAsync(int id) {
            return base.Channel.AdminRoleByIDAsync(id);
        }
        
        public string AdminRoleUpdate(string str) {
            return base.Channel.AdminRoleUpdate(str);
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleUpdateAsync(string str) {
            return base.Channel.AdminRoleUpdateAsync(str);
        }
        
        public string AdminRoleDelete(int id) {
            return base.Channel.AdminRoleDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleDeleteAsync(int id) {
            return base.Channel.AdminRoleDeleteAsync(id);
        }
        
        public string AdminRoleRelAll() {
            return base.Channel.AdminRoleRelAll();
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleRelAllAsync() {
            return base.Channel.AdminRoleRelAllAsync();
        }
        
        public string AdminRoleRelAdd(string str) {
            return base.Channel.AdminRoleRelAdd(str);
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleRelAddAsync(string str) {
            return base.Channel.AdminRoleRelAddAsync(str);
        }
        
        public string AdminRoleRelUpdate(string str) {
            return base.Channel.AdminRoleRelUpdate(str);
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleRelUpdateAsync(string str) {
            return base.Channel.AdminRoleRelUpdateAsync(str);
        }
        
        public string AdminRoleRelEntity(int id) {
            return base.Channel.AdminRoleRelEntity(id);
        }
        
        public System.Threading.Tasks.Task<string> AdminRoleRelEntityAsync(int id) {
            return base.Channel.AdminRoleRelEntityAsync(id);
        }
        
        public string RoleRelOpen(int id) {
            return base.Channel.RoleRelOpen(id);
        }
        
        public System.Threading.Tasks.Task<string> RoleRelOpenAsync(int id) {
            return base.Channel.RoleRelOpenAsync(id);
        }
        
        public string MenuAll() {
            return base.Channel.MenuAll();
        }
        
        public System.Threading.Tasks.Task<string> MenuAllAsync() {
            return base.Channel.MenuAllAsync();
        }
        
        public string MenuAdd(string str) {
            return base.Channel.MenuAdd(str);
        }
        
        public System.Threading.Tasks.Task<string> MenuAddAsync(string str) {
            return base.Channel.MenuAddAsync(str);
        }
        
        public string MenuUpdate(string str) {
            return base.Channel.MenuUpdate(str);
        }
        
        public System.Threading.Tasks.Task<string> MenuUpdateAsync(string str) {
            return base.Channel.MenuUpdateAsync(str);
        }
        
        public string MenuEntity(int id) {
            return base.Channel.MenuEntity(id);
        }
        
        public System.Threading.Tasks.Task<string> MenuEntityAsync(int id) {
            return base.Channel.MenuEntityAsync(id);
        }
        
        public string MenuOpen(int id) {
            return base.Channel.MenuOpen(id);
        }
        
        public System.Threading.Tasks.Task<string> MenuOpenAsync(int id) {
            return base.Channel.MenuOpenAsync(id);
        }
        
        public string LimitAll() {
            return base.Channel.LimitAll();
        }
        
        public System.Threading.Tasks.Task<string> LimitAllAsync() {
            return base.Channel.LimitAllAsync();
        }
        
        public bool LimitAdd(string str, string str1) {
            return base.Channel.LimitAdd(str, str1);
        }
        
        public System.Threading.Tasks.Task<bool> LimitAddAsync(string str, string str1) {
            return base.Channel.LimitAddAsync(str, str1);
        }
        
        public bool LimitUpdate(string[] str) {
            return base.Channel.LimitUpdate(str);
        }
        
        public System.Threading.Tasks.Task<bool> LimitUpdateAsync(string[] str) {
            return base.Channel.LimitUpdateAsync(str);
        }
        
        public string[] LimitEditData(int id) {
            return base.Channel.LimitEditData(id);
        }
        
        public System.Threading.Tasks.Task<string[]> LimitEditDataAsync(int id) {
            return base.Channel.LimitEditDataAsync(id);
        }
        
        public string LimitDelete(int id) {
            return base.Channel.LimitDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> LimitDeleteAsync(int id) {
            return base.Channel.LimitDeleteAsync(id);
        }
        
        public void loginlog(string[] str) {
            base.Channel.loginlog(str);
        }
        
        public System.Threading.Tasks.Task loginlogAsync(string[] str) {
            return base.Channel.loginlogAsync(str);
        }
        
        public void Errorlog(string ex) {
            base.Channel.Errorlog(ex);
        }
        
        public System.Threading.Tasks.Task ErrorlogAsync(string ex) {
            return base.Channel.ErrorlogAsync(ex);
        }
        
        public void controllog(string str, string functionname, string other) {
            base.Channel.controllog(str, functionname, other);
        }
        
        public System.Threading.Tasks.Task controllogAsync(string str, string functionname, string other) {
            return base.Channel.controllogAsync(str, functionname, other);
        }
        
        public void errorcontrollog(string str, string functionname, string other, string ex) {
            base.Channel.errorcontrollog(str, functionname, other, ex);
        }
        
        public System.Threading.Tasks.Task errorcontrollogAsync(string str, string functionname, string other, string ex) {
            return base.Channel.errorcontrollogAsync(str, functionname, other, ex);
        }
        
        public string ErrorLogAll() {
            return base.Channel.ErrorLogAll();
        }
        
        public System.Threading.Tasks.Task<string> ErrorLogAllAsync() {
            return base.Channel.ErrorLogAllAsync();
        }
        
        public string ErrorLogByID(int ID) {
            return base.Channel.ErrorLogByID(ID);
        }
        
        public System.Threading.Tasks.Task<string> ErrorLogByIDAsync(int ID) {
            return base.Channel.ErrorLogByIDAsync(ID);
        }
        
        public string AdminLogAll() {
            return base.Channel.AdminLogAll();
        }
        
        public System.Threading.Tasks.Task<string> AdminLogAllAsync() {
            return base.Channel.AdminLogAllAsync();
        }
        
        public string ControlLogAll() {
            return base.Channel.ControlLogAll();
        }
        
        public System.Threading.Tasks.Task<string> ControlLogAllAsync() {
            return base.Channel.ControlLogAllAsync();
        }
        
        public string ControlLogByID(int ID) {
            return base.Channel.ControlLogByID(ID);
        }
        
        public System.Threading.Tasks.Task<string> ControlLogByIDAsync(int ID) {
            return base.Channel.ControlLogByIDAsync(ID);
        }
        
        public string CTErrorLogAll() {
            return base.Channel.CTErrorLogAll();
        }
        
        public System.Threading.Tasks.Task<string> CTErrorLogAllAsync() {
            return base.Channel.CTErrorLogAllAsync();
        }
        
        public string CTLoginLogAll() {
            return base.Channel.CTLoginLogAll();
        }
        
        public System.Threading.Tasks.Task<string> CTLoginLogAllAsync() {
            return base.Channel.CTLoginLogAllAsync();
        }
        
        public string CTErrorLogByID(int ID) {
            return base.Channel.CTErrorLogByID(ID);
        }
        
        public System.Threading.Tasks.Task<string> CTErrorLogByIDAsync(int ID) {
            return base.Channel.CTErrorLogByIDAsync(ID);
        }
        
        public string CTControlLogAll() {
            return base.Channel.CTControlLogAll();
        }
        
        public System.Threading.Tasks.Task<string> CTControlLogAllAsync() {
            return base.Channel.CTControlLogAllAsync();
        }
        
        public string CTControlLogByID(int ID) {
            return base.Channel.CTControlLogByID(ID);
        }
        
        public System.Threading.Tasks.Task<string> CTControlLogByIDAsync(int ID) {
            return base.Channel.CTControlLogByIDAsync(ID);
        }
        
        public string CheckTypeAll() {
            return base.Channel.CheckTypeAll();
        }
        
        public System.Threading.Tasks.Task<string> CheckTypeAllAsync() {
            return base.Channel.CheckTypeAllAsync();
        }
        
        public string CheckTypeAdd(string str) {
            return base.Channel.CheckTypeAdd(str);
        }
        
        public System.Threading.Tasks.Task<string> CheckTypeAddAsync(string str) {
            return base.Channel.CheckTypeAddAsync(str);
        }
        
        public string CheckTypeUpdate(string str) {
            return base.Channel.CheckTypeUpdate(str);
        }
        
        public System.Threading.Tasks.Task<string> CheckTypeUpdateAsync(string str) {
            return base.Channel.CheckTypeUpdateAsync(str);
        }
        
        public string CheckTypeDelete(int id) {
            return base.Channel.CheckTypeDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> CheckTypeDeleteAsync(int id) {
            return base.Channel.CheckTypeDeleteAsync(id);
        }
        
        public string CheckRoleRelAll() {
            return base.Channel.CheckRoleRelAll();
        }
        
        public System.Threading.Tasks.Task<string> CheckRoleRelAllAsync() {
            return base.Channel.CheckRoleRelAllAsync();
        }
        
        public bool CheckRoleRelAdd(string str) {
            return base.Channel.CheckRoleRelAdd(str);
        }
        
        public System.Threading.Tasks.Task<bool> CheckRoleRelAddAsync(string str) {
            return base.Channel.CheckRoleRelAddAsync(str);
        }
        
        public bool CheckRoleRelUpdate(string str) {
            return base.Channel.CheckRoleRelUpdate(str);
        }
        
        public System.Threading.Tasks.Task<bool> CheckRoleRelUpdateAsync(string str) {
            return base.Channel.CheckRoleRelUpdateAsync(str);
        }
        
        public string DataByRoleID(int roleid) {
            return base.Channel.DataByRoleID(roleid);
        }
        
        public System.Threading.Tasks.Task<string> DataByRoleIDAsync(int roleid) {
            return base.Channel.DataByRoleIDAsync(roleid);
        }
        
        public string[] CheckRoleRelEdit(int roleid) {
            return base.Channel.CheckRoleRelEdit(roleid);
        }
        
        public System.Threading.Tasks.Task<string[]> CheckRoleRelEditAsync(int roleid) {
            return base.Channel.CheckRoleRelEditAsync(roleid);
        }
        
        public bool CheckRoleRelDelete(int roleid) {
            return base.Channel.CheckRoleRelDelete(roleid);
        }
        
        public System.Threading.Tasks.Task<bool> CheckRoleRelDeleteAsync(int roleid) {
            return base.Channel.CheckRoleRelDeleteAsync(roleid);
        }
        
        public bool ht_CheckTableSave(string str) {
            return base.Channel.ht_CheckTableSave(str);
        }
        
        public System.Threading.Tasks.Task<bool> ht_CheckTableSaveAsync(string str) {
            return base.Channel.ht_CheckTableSaveAsync(str);
        }
        
        public string CheckTableAll() {
            return base.Channel.CheckTableAll();
        }
        
        public System.Threading.Tasks.Task<string> CheckTableAllAsync() {
            return base.Channel.CheckTableAllAsync();
        }
        
        public string CheckTableByID(int id) {
            return base.Channel.CheckTableByID(id);
        }
        
        public System.Threading.Tasks.Task<string> CheckTableByIDAsync(int id) {
            return base.Channel.CheckTableByIDAsync(id);
        }
        
        public bool CheckTableSave(string str) {
            return base.Channel.CheckTableSave(str);
        }
        
        public System.Threading.Tasks.Task<bool> CheckTableSaveAsync(string str) {
            return base.Channel.CheckTableSaveAsync(str);
        }
        
        public bool CheckTableNoSuccess(int id) {
            return base.Channel.CheckTableNoSuccess(id);
        }
        
        public System.Threading.Tasks.Task<bool> CheckTableNoSuccessAsync(int id) {
            return base.Channel.CheckTableNoSuccessAsync(id);
        }
        
        public string AccountTypeAll() {
            return base.Channel.AccountTypeAll();
        }
        
        public System.Threading.Tasks.Task<string> AccountTypeAllAsync() {
            return base.Channel.AccountTypeAllAsync();
        }
        
        public string AccountTypeAdd(string str) {
            return base.Channel.AccountTypeAdd(str);
        }
        
        public System.Threading.Tasks.Task<string> AccountTypeAddAsync(string str) {
            return base.Channel.AccountTypeAddAsync(str);
        }
        
        public string AccountTypeUpdate(string str) {
            return base.Channel.AccountTypeUpdate(str);
        }
        
        public System.Threading.Tasks.Task<string> AccountTypeUpdateAsync(string str) {
            return base.Channel.AccountTypeUpdateAsync(str);
        }
        
        public string AccountTypeDelete(int id) {
            return base.Channel.AccountTypeDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> AccountTypeDeleteAsync(int id) {
            return base.Channel.AccountTypeDeleteAsync(id);
        }
    }
}
